{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "scopeName": "source.iar",
  "name": "IAR",
  "fileTypes": [
    "s",
    "S"
  ],
  "patterns": [
    {
      "match": "([;@]|//).*$",
      "name": "comment.iar"
    },
    {
      "match": "^\\s*#(define|include|if|ifdef|else|elif|endif)(\\s(defined\\([a-zA-Z_]+\\)|[a-zA-Z_]+))?$",
      "name": "meta.preprocessor"
    },
    {
      "match": "^\\s*#.*$",
      "name": "comment.iar"
    },
    {
      "name": "comment.iar",
      "begin": "\\/\\*",
      "beginCaptures": {
        "0": {
          "name": "comment.begin.iar"
        }
      },
      "endCaptures": {
        "0": {
          "name": "comment.end.iar"
        }
      },
      "end": "\\*\\/"
    },
    {
      "match": "(^\\w[\\w0-9]*:?)|(\\w[\\w0-9]*:)",
      "name": "entity.name.tag"
    },
    {
      "match": "^\\s*\\.?\\w+:\\s*(?=$|;)",
      "name": "routine.iar"
    },
    {
      "name": "invalid.illegal.string.iar",
      "match": "\"[^\"]+$"
    },
    {
      "name": "string.quoted.iar",
      "begin": "\"",
      "end": "\""
    },
    {
      "match": "\\'\\S\\'",
      "name": "string.char.iar"
    },
    {
      "match": "#?[0-9]+\\b",
      "name": "constant.numeric.dec.iar"
    },
    {
      "match": "#-?[a-zA-Z_][0-9a-zA-Z_]*\\b",
      "name": "variable.named.iar"
    },
    {
      "match": "#?-?(0x|&)[0-9a-fA-F_]+\\b",
      "name": "constant.numeric.hex.iar"
    },
    {
      "match": "\\b(?i)([rcp]([0-9]|1[0-5])|[xwbhsdq]([0-9]|1[0-9]|2[0-9]|3[0-1])|wzr|xzr|wsp|fpsr|fpcr|a[1-4]|v([0-9]|1[0-9]|2[0-9]|3[0-1])\\.(16b|8[b|h]|4[s|h]|2[s|d])|sl|sb|fp|ip|sp|lr|(c|s)psr(_c)?|pc|fpsid|fpscr|fpexc|APSR_nzcv|sy)(?-i)(!|\\b)",
      "name": "storage.other.register.iar"
    },
    {
      "name": "storage.memaddress.iar",
      "begin": "\\[",
      "end": "\\]",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    {
      "name": "storage.stack.iar",
      "begin": "\\{",
      "end": "\\}\\^?",
      "patterns": [
        {
          "include": "$base"
        }
      ]
    },
    {
      "match": "\\b(?i)(\\+|-|!|:LNOT:|~|:NOT:|LOW|HIGH|BYTE1|BYTE2|BYTE3|BYTE4|LWRD|HWRD|DATE|SFB|SFE|SIZEOF)(?-i)",
      "name": "keyword.operator.iar"
    },
    {
      "match": "\\*|/|%|:MOD:",
      "name": "keyword.operator.iar"
    },
    {
      "match": "\\+|-",
      "name": "keyword.operator.iar"
    },
    {
      "match": ">>|:SHR:|<<|:SHL",
      "name": "keyword.operator.iar"
    },
    {
      "match": "&&|:LAND:|&|:AND",
      "name": "keyword.operator.iar"
    },
    {
      "match": "\\|\\||:LOR:|:OR:|XOR|:LEOR:|\\^|:EOR:",
      "name": "keyword.operator.iar"
    },
    {
      "match": "=|==|<>|!=|<|>|UCT|ULT|>=|<=",
      "name": "keyword.operator.iar"
    },
    {
      "match": "\\b(?i)(v?(add|cvt|sub|mov|trn|cmp|div|qdmulh|mrs|mul|ld1|qadd|qshrun|st[1234]|addw|mull|mlal|rshrn|swp|qmovunand|m(rs|sr)|eor|sub|rsb|adc|sbc|rsc|and|tst|teq|cmp|cmn|orr|mov|bic|mvn|neg|lsr|lsl|ror|asr)s?|mul|mla|mull|smlabb|mov(w|t)|rev(8|16)?|pld|adr|adrl|vswp)(ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al)?(?-i)\\b",
      "name": "support.function.mnemonic.arithmetic.iar"
    },
    {
      "match": "\\b(?i)(swi|svc|wfi|dmb|clrex|dsb|isb|v(ldr|str|push|pop)|push|pop|b(l|l?x|l?r)?|(i|e)?ret|(st|ld)(p|r(ex|s?(h|b)|d)?|m((f|e)(d|a)|(d|i)(b|a))?))(ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al)?(?-i)\\b",
      "name": "support.function.mnemonic.memory.iar"
    },
    {
      "match": "\\b(?i)(def(b|w|s)|equ|align\\s.+\\.s)(?-i)\\b",
      "name": "keyword.control.define.iar"
    },
    {
      "name": "keyword.control.directive.iar",
      "match": "\\.(?i)(globl|global|macro|endm|purgem|if|elseif|else|endif|SECTION|text|data|bss|arm|align|balign|irp|rept|endr|req|unreq|error|short|func|endfunc|hidden|type|fpu|arch|code|altmacro|object_arch|word|int|string)(?-i)\\b"
    },
    {
      "match": "\\b(MODULE|END)",
      "name": "keyword.other.unit"
    },
    {
      "match": "(SECTION)\\b ([\\w_\\.][\\w_\\.0-9]*)(:CODE|:CONST|:DATA)?(:REORDER|:NOREORDER)?(:ROOT|:NOROOT)?",
      "captures": {
        "1": { "name": "keyword.control.directive.iar" }, 
        "2": {"name": "entity.name.class.iar"},
        "3": {"name": "storage.type"},
        "4": {"name": "storage.modifier"},
        "5": {"name": "storage.modifier"}
      }
    },
    {
      "match": "(PUBLIC|PUBWEAK|EXTERN)\\s+(\\w[\\w0-9]*)",
      "captures": {
        "1": {"name": "keyword.control.directive.iar"},
        "2": {"name": "entity.name.tag"}
      }
    },
    {
      "match": "\\b(DATA|DC8|DC16|DC24|DC32|DCB|DCD|DCW|DEFINE|DS8|DS16|DS23|DS32|THUMB)\\b",
      "name": "keyword.other"
    },
    {
      "name": "keyword.other.preprocessor.iar",
      "match": "^\\s*\\.?(define|defined|elif|else|if|ifdef|ifndef|line|include|get|pragma|undef|endif)\\b"
    },
    {
      "match": "\\b\\=",
      "name": "keyword.control.evaluation"
    },
    {
      "match": "\\b(?i)(nop(ne|eq|cs|hs|cc|lo|mi|pl|vs|vc|hi|ls|lt|le|gt|ge|al)?)(?-i)\\b",
      "name": "comment.nop.iar"
    }
  ]
}
